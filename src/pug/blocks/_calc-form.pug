.modal-wrapper.modal-calculation.modal-wrapper--scroll(data-modal="modal-calculation")
	.modal-body
		//===btn close popup ===
		button(type="button" data-role="modal-close").btn-close
			svg.svg-close
				use(href='./img/sprite.svg#svg-close')
		.modal-form
			.h2.txt-center Расчет потерь
			form.calculation-form(action="#")
				.custom-preloader
					.loader
				//===== Расход пара====
				input(type="hidden" name="k" value="0.48")
				.form-item
					.label
						span Расход пара, т/ч
						//======подсказка, всплывает о ховеру======
						.tooltip
							.tooltip-icon
								span ?
							.tooltip-box
								p В паропроводе. Значение расхода для расчетного участка
					.form-input
						input(type="number" name="steamConsumption" placeholder="Допустимые значения 1-100 тонн" required)
				
				//===== Тариф на тепловую энергию ====
				.form-item
					.label
						span Тариф на тепловую энергию, руб./Гкал
						//======подсказка, всплывает о ховеру======
						.tooltip
							.tooltip-icon
								span ?
							.tooltip-box
								p Стоимость 1 Гкал. Устанавливается ресурсоснабжающей организацией или внутриведомственным постановлением
					.form-input
						input(type="number" name="energyTariff"  min="1500" max="4000" placeholder="Допустимые значения 1500-4000 руб/Гкал" required)
				
				//===== Обследование конденсатоотводчиков====
				.form-item
					.label
						span Обследование конденсатоотводчиков (?)
						//======подсказка, всплывает о ховеру======
						.tooltip
							.tooltip-icon
								span ?
							.tooltip-box
								p За последние 5 лет. Отражает достигнутый уровень технического обслуживания
					.custom-select-wrapper
						select.custom-select(name="diagnosticOption")
							option(value="0") Как давно проводилось?
							option(value="0.3") Не проводилось
							option(value="0.2") Проводилось давно
							option(value="0.1") Проводилось год назад
							option(value="0.4") Конденсатоотводчиков нет

				//===== Длина паропровода====
				.form-item
					.label
						span Длина паропровода, м.
						//======подсказка, всплывает о ховеру======
						.tooltip
							.tooltip-icon
								span ?
							.tooltip-box
								p Полная протяженность. От ввода до самого удаленного оборудования
					.form-input
						input(type="number" min="5" max="1500" name="lineLength" placeholder="Допустимое значение 5-1500 метров" required)
				.form-item.form-btn-calc
					span
					button.btn.w-100#calc-btn(type="button") Рассчитать
					
				.form-item.form-result.h3.txt-bold
					p Значение величины потерь:
					p.out-result-wrapper #[span#out-result 0] &#8381; в час
						span.notify Есть незаполненные поля

				.form-btn
					+btn('Запросить КП')
				script.
					document.addEventListener('DOMContentLoaded', function() {	
						const selectWrapper = document.querySelector('.custom-select-wrapper');
						const selectElement = document.querySelector('.custom-select');
						console.log(selectWrapper)
						selectElement.addEventListener('click', function() {
							selectWrapper.classList.toggle('open');
							
						});

						// Закрываем селект при клике вне его области
						document.addEventListener('click', function(e) {
							if (!selectWrapper.contains(e.target)) {
								selectWrapper.classList.remove('open');
							}
						});
						
						document.getElementById('calc-btn').addEventListener('click', function() {
							// Получаем значения полей формы
							const k = parseFloat(document.querySelector('input[name="k"]').value);
							let steamConsumption = parseFloat(document.querySelector('input[name="steamConsumption"]').value);
							let energyTariff = parseFloat(document.querySelector('input[name="energyTariff"]').value);
							const diagnosticOption = parseFloat(document.querySelector('select[name="diagnosticOption"]').value);
							let lineLength = parseFloat(document.querySelector('input[name="lineLength"]').value);

							const notifyElement = document.querySelector('.notify');
							        let hasEmptyFields = false;

							// Проверяем и корректируем значения
							if (isNaN(steamConsumption)) {
								steamConsumption = 0;
								document.querySelector('input[name="steamConsumption"]').value = steamConsumption;
								hasEmptyFields = true;
							} else if (steamConsumption < 1) {
								steamConsumption = 1;
								document.querySelector('input[name="steamConsumption"]').value = steamConsumption;
							} else if (steamConsumption > 100) {
								steamConsumption = 100;
								document.querySelector('input[name="steamConsumption"]').value = steamConsumption;
							}

							if (isNaN(energyTariff)) {
								energyTariff = 0;
								document.querySelector('input[name="energyTariff"]').value = energyTariff;
								hasEmptyFields = true;
							} else if (energyTariff < 1500) {
								energyTariff = 1500;
								document.querySelector('input[name="energyTariff"]').value = energyTariff;
							} else if (energyTariff > 4000) {
								energyTariff = 4000;
								document.querySelector('input[name="energyTariff"]').value = energyTariff;
							}

							if (isNaN(lineLength)) {
								lineLength = 0;
								document.querySelector('input[name="lineLength"]').value = lineLength;
								hasEmptyFields = true;
							} else if (lineLength < 5) {
								lineLength = 5;
								document.querySelector('input[name="lineLength"]').value = lineLength;
							} else if (lineLength > 1500) {
								lineLength = 1500;
								document.querySelector('input[name="lineLength"]').value = lineLength;
							}

							// Определение коэффициента lineLegthK
							let lineLegthK;
							if (lineLength < 50) {
								lineLegthK = 1;
							} else if (lineLength >= 50 && lineLength < 100) {
								lineLegthK = 1.03;
							} else if (lineLength >= 100 && lineLength < 300) {
								lineLegthK = 1.04;
							} else if (lineLength >= 300 && lineLength < 500) {
								lineLegthK = 1.05;
							} else if (lineLength >= 500 && lineLength <= 1500) {
								lineLegthK = 1.1;
							}

							// Обработка результата и уведомления
							if (hasEmptyFields) {
								notifyElement.classList.add('visible');
							} else {
								notifyElement.classList.remove('visible');
								let result = k * steamConsumption * energyTariff * diagnosticOption * lineLegthK;
								result = Math.round(result); // Округляем до целого числа
								document.getElementById('out-result').textContent = result.toLocaleString(); // Форматируем с разделителями разрядов
							}
						});
					});

